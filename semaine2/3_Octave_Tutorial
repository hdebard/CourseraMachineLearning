# # # # # # # # # # # # # #
# 	  	  	  	  	  	  #
#		Octave			  #
#		Tutorial		  #
#						  #
# # # # # # # #	# # # # # #

# Basic Operation #

  _ Most used language in machine learning:

  		_ Octave, Matlab, Python/Numpy, R

  _ Elementary option:
		_ calcul: 5 + 6, 3 - 2, 5 * 8, 1 / 2, 2^6,
		_ condition: 1 == 2, 1 ~= 2, 1 && 0, 1 || 0, xor(1,0)
		_ Change the prompt: PS1('>> '); 
		_ Assign variable: a = 3
		_ The semicolon suppress the output ';'
		_ '%' = comment
		_ pi = pi! CQFD
		_ disp() = display command
		_ disp(sprintf('2 decimals: %0.2f', a))
		   == use printf in disp to personazi your outpud

  _ Matrix and Vector operation:
  		_ M = [1,2; 3,4; 5,6] = [1 2;3 4;5 6]
		_ v = [1,2,3] = [1 2 3]
		_ v = 1:0.1:2 = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]
		_ C = ones(2,3) = [1 1 1; 1 1 1]
		_ D = 2 * ones(2,3) = [2 2 2; 2 2 2]
		_ w = one(1,3) = [1 1 1]
		_ w = zeros(1, 3) = [0 0 0]
		_ r = rand(3, 3) = [[x.xx, x.xx, x.xx];[x.xx, x.xx, x.xx];[x.xx, x.xx, x.xx]]
		_ rand() <- distribution between 0 and 1
		_ randn() <- gaussian distribution
		_ sqrt() <- square function
		_ hist() <- histogram ploting ?
		_ eye(x) <- identity matrix x by x
		_ help()

# Moving Data Around #

  		 _ size(A) <- return the size of a matrix A
		   		  _ size(A, 1) <- nbr of rows
				  _ size(A, 2) <- nrd of columns
		_ length(V) <- return the length of a vector
		_ pwd <- show actual path
		_ cd <- change directory
		_ ls <- list directory
		_ load [file name] <- load a file
		_ load('filex') <- same
		_ who <- show variable in the current session
		_ whos <- same but show more information
		_ clear [variable] <- clear a variable
		_ clear <- clear all variable
		_ clc -< clear the screen
		_ v = priceY(1:10) <- take the first 10 element of priceY
		  	  			   	  and put them into v
		_ save [file] [variable] -ascii <- save in a human readable format
		_ save [file] [variable] <- save in binary format 
		_ A(3,2) <- show element of A at index[3]{2}
		_ A(3,:) <- show all element in the third row of A
		_ A([2 3], :) <- show all element in the second and third rows of A
		_ A(:,2) = [10; 11; 12] <- assigning 2nd columns of A
		_ A = [A, [100;101;102]] <- appending a new column to A
		_ M(:) <- put all element of a matrix in colums
		_ C = [A B] <- puting B to the left of A
		_ C = [A,B] <- puting B under A

# Computing on Data #

  	_ A = [1 2; 3 4; 5 6]
	_ B = [11 12; 13 14; 15 16]
	_ C = [1 1; 2 2]

	_ A * C = [5 5; 11 11; 17 17]
	_ A + C
	_ A - C

	_ A .* B = [11 24;39 56;75 96] <- multypli each element
	  	   	   	   		 	   	   by the element on the same index								   
	_ A .^ 2 <- square all element of A
	_ A ./ 2 <- divide by 2 all element of A

	_ log(A) <- logarithm of A
	_ exp(A) <- exponential of A
	_ asb(A) <- absolute function

	_ A' <- transpose of A
	  	 (A')' = A

	_ max() <- for vector give the maximum value
	  		<- for matrix give the minimum value of each columns

	_ X < 3, bolean of element < 3,
	_ find(X < 3), give the number, not a bolean

	_ magic() <- create magic square matrix
	_ help [command] <- show the man of the command

# Plotting Data #

  	_ plot(x,y)
	_ plot(x,y,'r') <- r is red color
	_ hold on <- to plot multiple function on the same graph
	_ xlabel('time')
	_ ylabel('value')
	_ legend('sin', 'cos')
	_ print -dpng 'name' <- dump the plot in a png
	_ close <- close ploting windows
	_ figure(1); plot(x,x); figure(2); plot(y,y)
	_ subplot(x,y,n); plot(x,x);subplot(x,y,n+1);plot(y,y)
	_ clf <- clear the window
	_ imagesc(A) <- special plotting method
	_ imagesc(A), colorbar, colormap gray <- add a color bar and use only grayscale
	_ use ',' or ';' to write multiple statement in the same line.

# Control Statements; for, while, if statement #

  _ for:
				>> for i=1:10,
				   	   v(i) = 2^i;
				   end;
  _ while:
				>> i = 1;
				>> while i <= 5;
				      v(i) = 100;
					  i = i+1;
			 	>> end;

  _ while + if
				>> i = 1;
				>> while true,
				   	 v(i) = 999;
					 i = i + 1;
					 if i == 6,
					   break;
					 end;
				>> ends;

  _ if:
				>> v(1) = 2
				>> if v(1)==1,
				>     disp('The value is one');
				>  elseif v(1) == 2,
				>     disp('The value is two'),
				>  else
				>     disp('The value is neither one or two.');
				>  end;

  _ quit <- quit command
  _ format of octave file are .m
  _ addpath('') <- add a path for search .m and execute function that are in theses file
  				   	   	 	  	  		 				(without loading them ?)

	_ COOOST FUUNCTIION 12min

# Vectorization #

  _ Explaination:
					_ Use matrix and vector in your calcul,
					  no loop and while better performance and expicit code.. mmh ?